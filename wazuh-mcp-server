#!/usr/bin/env python3
"""
Wazuh MCP Server - Main Executable
Production-grade FastMCP server for Wazuh SIEM integration
"""

import os
import sys
import argparse
from pathlib import Path

# Add src directory to Python path
current_dir = Path(__file__).resolve().parent
src_dir = current_dir / "src"
sys.path.insert(0, str(src_dir))

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="Wazuh MCP Server - FastMCP server for Wazuh SIEM integration",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  ./wazuh-mcp-server --stdio         # Start STDIO server for Claude Desktop (recommended)
  ./wazuh-mcp-server --remote        # Start remote MCP server for Custom Connectors
  ./wazuh-mcp-server --http          # Start HTTP/SSE server using FastMCP (legacy)
  ./wazuh-mcp-server --version       # Show version information
  
Environment Variables:
  WAZUH_HOST        - Wazuh Manager hostname/IP (required)
  WAZUH_USER        - Wazuh API username (required)
  WAZUH_PASS        - Wazuh API password (required)
  WAZUH_PORT        - Wazuh API port (default: 55000)
  MCP_TRANSPORT     - Transport mode: stdio, remote, or http (default: stdio)
  MCP_HOST          - Server bind address (default: 0.0.0.0)
  MCP_PORT          - Server port (default: 3000)
  VERIFY_SSL        - SSL verification (default: true)
"""
    )
    
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "--stdio", "--local",
        action="store_true", 
        help="Start STDIO server for Claude Desktop direct integration (recommended)"
    )
    group.add_argument(
        "--remote", "--mcp-remote",
        action="store_true",
        help="Start remote MCP server for Claude Desktop Custom Connectors"
    )
    group.add_argument(
        "--http", "--server",
        action="store_true",
        help="Start HTTP/SSE server using FastMCP (legacy mode)"
    )
    group.add_argument(
        "--version", "-v",
        action="store_true",
        help="Show version information"
    )
    group.add_argument(
        "--validate",
        action="store_true",
        help="Run validation tests and exit"
    )
    
    return parser.parse_args()

def show_version():
    """Show version information."""
    print("üõ°Ô∏è Wazuh MCP Server v2.0.0")
    print("FastMCP-powered Wazuh SIEM integration")
    print("https://github.com/gensecaihq/Wazuh-MCP-Server")
    print()
    print(f"Python: {sys.version}")
    print(f"Platform: {sys.platform}")
    
    try:
        import fastmcp
        print(f"FastMCP: {fastmcp.__version__}")
    except (ImportError, AttributeError):
        print("FastMCP: Not available")
    
    try:
        import httpx
        print(f"HTTPX: {httpx.__version__}")
    except (ImportError, AttributeError):
        print("HTTPX: Not available")

def validate_environment():
    """Validate required environment variables."""
    required_vars = ["WAZUH_HOST", "WAZUH_USER", "WAZUH_PASS"]
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå ERROR: Missing required environment variables:")
        for var in missing_vars:
            print(f"   - {var}")
        print()
        print("Please set these variables and try again.")
        print("Example:")
        print("  export WAZUH_HOST=your-wazuh-server.com")
        print("  export WAZUH_USER=your-api-user")
        print("  export WAZUH_PASS=your-api-password")
        return False
    
    return True

def run_validation():
    """Run validation tests."""
    try:
        import subprocess
        result = subprocess.run([sys.executable, "validate-production.py", "--full"], 
                              capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(result.stderr, file=sys.stderr)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Validation failed: {e}")
        return False

def start_http_server():
    """Start HTTP/SSE server."""
    try:
        import uvicorn
        import asyncio
        from wazuh_mcp_server.server import mcp, initialize_server
        
        # Initialize server components
        print("üîç Initializing server...")
        asyncio.run(initialize_server())
        
        # Get configuration
        host = os.getenv("MCP_HOST", "0.0.0.0")
        try:
            port = int(os.getenv("MCP_PORT", "3000"))
            if port < 1 or port > 65535:
                raise ValueError("Port must be between 1 and 65535")
        except ValueError as e:
            print(f"‚ùå ERROR: Invalid MCP_PORT value '{os.getenv('MCP_PORT')}': {e}")
            return False
        
        print(f"üöÄ Starting HTTP/SSE server on {host}:{port}")
        print(f"üåê Access URL: http://{host}:{port}")
        print(f"üè• Health Check: http://{host}:{port}/health")
        print("   Press Ctrl+C to stop")
        
        # Start server using FastMCP's HTTP app
        app = mcp.http_app()
        uvicorn.run(
            app,
            host=host,
            port=port,
            log_level="info",
            access_log=True
        )
        return True
        
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")
        return True
    except ImportError as e:
        print(f"‚ùå ERROR: Missing dependency: {e}")
        print("   Please install required packages: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: Server startup failed: {e}")
        return False

def start_remote_server():
    """Start remote MCP server for Claude Desktop Custom Connectors."""
    try:
        import uvicorn
        import asyncio
        from wazuh_mcp_server.server import initialize_server
        from wazuh_mcp_server.remote_server import remote_app
        
        # Initialize server components
        print("üîç Initializing remote MCP server...")
        asyncio.run(initialize_server())
        
        # Get configuration
        host = os.getenv("MCP_HOST", "0.0.0.0")
        try:
            port = int(os.getenv("MCP_PORT", "3000"))
            if port < 1 or port > 65535:
                raise ValueError("Port must be between 1 and 65535")
        except ValueError as e:
            print(f"‚ùå ERROR: Invalid MCP_PORT value '{os.getenv('MCP_PORT')}': {e}")
            return False
        
        print(f"üöÄ Starting Remote MCP Server on {host}:{port}")
        print(f"üåê Access URL: http://{host}:{port}")
        print(f"üè• Health Check: http://{host}:{port}/health")
        print(f"üì° SSE Endpoint: http://{host}:{port}/sse")
        print(f"üí¨ Message Endpoint: http://{host}:{port}/message")
        print(f"üîë Authentication: Bearer token required (Phase 1: use 'wazuh_test')")
        print("   Press Ctrl+C to stop")
        
        # Start remote MCP server
        uvicorn.run(
            remote_app,
            host=host,
            port=port,
            log_level="info",
            access_log=True
        )
        return True
        
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")
        return True
    except ImportError as e:
        print(f"‚ùå ERROR: Missing dependency: {e}")
        print("   Please install required packages: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: Server startup failed: {e}")
        return False

def start_stdio_server():
    """Start STDIO server."""
    try:
        import asyncio
        from wazuh_mcp_server.server import mcp, initialize_server
        
        # Initialize server components
        print("üîç Initializing server...")
        asyncio.run(initialize_server())
        
        print("üöÄ Starting STDIO server for Claude Desktop")
        print("   Waiting for MCP client connection...")
        print("   Press Ctrl+C to stop")
        
        # Start STDIO server
        mcp.run()
        return True
        
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")
        return True
    except ImportError as e:
        print(f"‚ùå ERROR: Missing dependency: {e}")
        print("   Please install required packages: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: Server startup failed: {e}")
        return False

def main():
    """Main entry point."""
    args = parse_arguments()
    
    # Handle version request
    if args.version:
        show_version()
        return 0
    
    # Handle validation request
    if args.validate:
        if not validate_environment():
            return 1
        success = run_validation()
        return 0 if success else 1
    
    # Validate environment for server start
    if not validate_environment():
        return 1
    
    # Determine transport mode
    if args.stdio:
        transport = "stdio"
    elif args.remote:
        transport = "remote"
    elif args.http:
        transport = "http"
    else:
        # Use environment variable or default to stdio
        transport = os.getenv("MCP_TRANSPORT", "stdio").lower()
    
    # Start appropriate server
    success = False
    if transport == "stdio":
        os.environ["MCP_TRANSPORT"] = "stdio"
        success = start_stdio_server()
    elif transport == "remote":
        os.environ["MCP_TRANSPORT"] = "remote"
        success = start_remote_server()
    elif transport == "http":
        os.environ["MCP_TRANSPORT"] = "http"
        success = start_http_server()
    else:
        print(f"‚ùå ERROR: Invalid transport mode '{transport}'")
        print("   Valid options: stdio, remote, http")
        return 1
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())