[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wazuh-mcp-server"
version = "1.1.0"
description = "Production-grade Model Context Protocol server for Wazuh security platform"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Wazuh MCP Server Project", email = "info@wazuh-mcp-server.org"}
]
maintainers = [
    {name = "Wazuh MCP Server Project", email = "info@wazuh-mcp-server.org"}
]
keywords = ["wazuh", "security", "mcp", "api", "monitoring", "siem"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Framework :: AsyncIO",
]
requires-python = ">=3.9"
dependencies = [
    "mcp>=0.9.0",
    "aiohttp>=3.9.0",
    "aiohttp-cors>=0.7.0",
    "websockets>=11.0.0",
    "pyjwt>=2.8.0",
    "urllib3>=2.0.0",
    "python-dateutil>=2.8.2",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "packaging>=21.0",
    "psutil>=5.9.0",
    "certifi>=2023.5.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.3.0",
]
docker = [
    "docker>=6.0.0",
    "docker-compose>=1.29.0",
]
testing = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "httpx>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/socfortress/Wazuh-MCP-Server"
Documentation = "https://github.com/socfortress/Wazuh-MCP-Server/blob/main/README.md"
Repository = "https://github.com/socfortress/Wazuh-MCP-Server"
"Bug Tracker" = "https://github.com/socfortress/Wazuh-MCP-Server/issues"
Changelog = "https://github.com/socfortress/Wazuh-MCP-Server/blob/main/CHANGELOG.md"

[project.scripts]
wazuh-mcp-server = "wazuh_mcp_server.main:main"
wazuh-mcp-test = "wazuh_mcp_server.scripts.test_connection:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["wazuh_mcp_server*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yml", "*.yaml", "*.md", "*.txt"]

# Tool configurations for development
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]