version: '3.8'

# High Availability Docker Compose Configuration
# This configuration provides clustering and load balancing for production deployments

services:
  # Load Balancer (HAProxy)
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: wazuh-mcp-lb
    ports:
      - "8443:8443"
      - "8080:8080"  # HAProxy stats
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./certs:/etc/ssl/certs:ro
    depends_on:
      - wazuh-mcp-server-1
      - wazuh-mcp-server-2
      - wazuh-mcp-server-3
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/stats"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/run:size=100M,noexec,nosuid,nodev
      - /tmp:size=100M,noexec,nosuid,nodev

  # Primary MCP Server Instance
  wazuh-mcp-server-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: wazuh-mcp-server-1
    environment:
      - INSTANCE_ID=server-1
      - CLUSTER_MODE=true
      - CLUSTER_ROLE=primary
      - REDIS_URL=redis://redis-primary:6379
      - REDIS_SENTINEL_ENABLED=true
      - REDIS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - REDIS_SENTINEL_MASTER=wazuh-mcp-master
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - LOG_LEVEL=INFO
      - WAZUH_API_URL=${WAZUH_API_URL}
      - WAZUH_API_USER=${WAZUH_API_USER}
      - WAZUH_API_PASSWORD=${WAZUH_API_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8443
      - MCP_TRANSPORT=sse
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./certs:/app/certs:ro
      - prometheus_multiproc_1:/tmp/prometheus_multiproc
    depends_on:
      - redis-primary
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
      - /var/run:size=100M,noexec,nosuid,nodev

  # Secondary MCP Server Instance
  wazuh-mcp-server-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: wazuh-mcp-server-2
    environment:
      - INSTANCE_ID=server-2
      - CLUSTER_MODE=true
      - CLUSTER_ROLE=secondary
      - REDIS_URL=redis://redis-primary:6379
      - REDIS_SENTINEL_ENABLED=true
      - REDIS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - REDIS_SENTINEL_MASTER=wazuh-mcp-master
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - LOG_LEVEL=INFO
      - WAZUH_API_URL=${WAZUH_API_URL}
      - WAZUH_API_USER=${WAZUH_API_USER}
      - WAZUH_API_PASSWORD=${WAZUH_API_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8443
      - MCP_TRANSPORT=sse
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./certs:/app/certs:ro
      - prometheus_multiproc_2:/tmp/prometheus_multiproc
    depends_on:
      - redis-primary
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
      - /var/run:size=100M,noexec,nosuid,nodev

  # Tertiary MCP Server Instance
  wazuh-mcp-server-3:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: wazuh-mcp-server-3
    environment:
      - INSTANCE_ID=server-3
      - CLUSTER_MODE=true
      - CLUSTER_ROLE=secondary
      - REDIS_URL=redis://redis-primary:6379
      - REDIS_SENTINEL_ENABLED=true
      - REDIS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - REDIS_SENTINEL_MASTER=wazuh-mcp-master
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - LOG_LEVEL=INFO
      - WAZUH_API_URL=${WAZUH_API_URL}
      - WAZUH_API_USER=${WAZUH_API_USER}
      - WAZUH_API_PASSWORD=${WAZUH_API_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8443
      - MCP_TRANSPORT=sse
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./certs:/app/certs:ro
      - prometheus_multiproc_3:/tmp/prometheus_multiproc
    depends_on:
      - redis-primary
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
      - /var/run:size=100M,noexec,nosuid,nodev

  # Redis Primary for High Availability
  redis-primary:
    image: redis:7-alpine
    container_name: redis-primary
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --requirepass ${REDIS_PASSWORD}
      --masterauth ${REDIS_PASSWORD}
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_primary_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Redis Replica 1
  redis-replica-1:
    image: redis:7-alpine
    container_name: redis-replica-1
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --requirepass ${REDIS_PASSWORD}
      --masterauth ${REDIS_PASSWORD}
      --replicaof redis-primary 6379
    environment:
      - REDIS_REPLICATION_MODE=replica
      - REDIS_MASTER_HOST=redis-primary
      - REDIS_MASTER_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_replica_1_data:/data
    depends_on:
      - redis-primary
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Redis Sentinel 1
  redis-sentinel-1:
    image: redis:7-alpine
    container_name: redis-sentinel-1
    command: >
      redis-sentinel /usr/local/etc/redis/sentinel.conf
      --sentinel announce-ip redis-sentinel-1
      --sentinel announce-port 26379
    volumes:
      - ./config/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-primary
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Redis Sentinel 2
  redis-sentinel-2:
    image: redis:7-alpine
    container_name: redis-sentinel-2
    command: >
      redis-sentinel /usr/local/etc/redis/sentinel.conf
      --sentinel announce-ip redis-sentinel-2
      --sentinel announce-port 26379
    volumes:
      - ./config/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-primary
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Redis Sentinel 3
  redis-sentinel-3:
    image: redis:7-alpine
    container_name: redis-sentinel-3
    command: >
      redis-sentinel /usr/local/etc/redis/sentinel.conf
      --sentinel announce-ip redis-sentinel-3
      --sentinel announce-port 26379
    volumes:
      - ./config/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-primary
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Prometheus for HA monitoring
  prometheus-ha:
    image: prom/prometheus:latest
    container_name: prometheus-ha
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--cluster.peer=prometheus-ha-2:9094'
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus-ha.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_ha_data:/prometheus
    depends_on:
      - wazuh-mcp-server-1
      - wazuh-mcp-server-2
      - wazuh-mcp-server-3
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true

  # Grafana for HA monitoring
  grafana-ha:
    image: grafana/grafana:latest
    container_name: grafana-ha
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3000/
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      - GF_SESSION_PROVIDER=file
      - GF_SESSION_PROVIDER_CONFIG=/var/lib/grafana/sessions
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_ALERTING_ENABLED=true
    volumes:
      - grafana_ha_data:/var/lib/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus-ha
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true

  # AlertManager for HA alerting
  alertmanager-ha:
    image: prom/alertmanager:latest
    container_name: alertmanager-ha
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--cluster.peer=alertmanager-ha-2:9094'
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_ha_data:/alertmanager
    depends_on:
      - prometheus-ha
    networks:
      - wazuh-mcp-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true

networks:
  wazuh-mcp-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: wazuh-mcp-ha
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  redis_primary_data:
    driver: local
  redis_replica_1_data:
    driver: local
  prometheus_ha_data:
    driver: local
  grafana_ha_data:
    driver: local
  alertmanager_ha_data:
    driver: local
  prometheus_multiproc_1:
    driver: local
  prometheus_multiproc_2:
    driver: local
  prometheus_multiproc_3:
    driver: local