global
    daemon
    log stdout local0
    maxconn 4096
    user haproxy
    group haproxy
    
    # SSL Configuration
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    
    # Security headers
    ssl-dh-param-file /etc/ssl/certs/dhparam.pem
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.ssl.maxrecord 1460
    tune.bufsize 32768
    tune.maxrewrite 8192

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option redispatch
    option httpchk GET /health
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout check 5000ms
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
frontend stats
    bind *:8080
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats realm HAProxy\ Statistics
    stats auth admin:${HAPROXY_STATS_PASSWORD}
    stats admin if TRUE

# Frontend for HTTPS traffic
frontend wazuh_mcp_https
    bind *:8443 ssl crt /etc/ssl/certs/wazuh-mcp.pem
    mode http
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header Content-Security-Policy "default-src 'self'"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Health check endpoint
    acl health_check path /health
    http-request return status 200 content-type text/plain string "OK" if health_check
    
    # Forward to backend
    default_backend wazuh_mcp_servers

# Backend servers
backend wazuh_mcp_servers
    mode http
    balance roundrobin
    option httpchk GET /health
    
    # Health check parameters
    default-server check inter 10s fall 3 rise 2
    
    # Server definitions
    server wazuh-mcp-server-1 wazuh-mcp-server-1:8443 check ssl verify none
    server wazuh-mcp-server-2 wazuh-mcp-server-2:8443 check ssl verify none
    server wazuh-mcp-server-3 wazuh-mcp-server-3:8443 check ssl verify none
    
    # Connection settings
    timeout server 30s
    timeout connect 5s
    
    # Failover configuration
    option allbackups
    option prefer-last-server
    
    # Sticky sessions for SSE connections
    stick-table type string len 32 size 30k expire 30m
    stick on cookie(session_id)
    
    # Server maintenance mode
    # To put a server in maintenance: echo "disable server wazuh_mcp_servers/wazuh-mcp-server-1" | socat stdio /var/run/haproxy.sock
    # To bring back online: echo "enable server wazuh_mcp_servers/wazuh-mcp-server-1" | socat stdio /var/run/haproxy.sock

# Frontend for HTTP traffic (redirect to HTTPS)
frontend wazuh_mcp_http
    bind *:80
    mode http
    redirect scheme https code 301 if !{ ssl_fc }

# Backend for metrics collection
backend prometheus_metrics
    mode http
    balance roundrobin
    option httpchk GET /metrics
    
    server wazuh-mcp-server-1 wazuh-mcp-server-1:9090 check
    server wazuh-mcp-server-2 wazuh-mcp-server-2:9090 check
    server wazuh-mcp-server-3 wazuh-mcp-server-3:9090 check

# Logging configuration
global
    log-send-hostname
    log-tag haproxy
    
# Global settings for monitoring
global
    stats socket /var/run/haproxy.sock mode 660 level admin
    stats timeout 30s
    
    # Process management
    pidfile /var/run/haproxy.pid
    
    # Performance
    nbthread 4
    cpu-map auto:1/1-4 0-3
    
    # Memory management
    tune.bufsize 32768
    tune.maxrewrite 8192
    tune.http.maxhdr 101
    
    # Connection tuning
    maxconn 4096
    tune.maxaccept 64
    tune.rcvbuf.server 32768
    tune.sndbuf.server 32768

# Advanced backend configuration
backend wazuh_mcp_servers
    # Advanced health checking
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Connection pooling
    http-reuse safe
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript
    
    # Caching headers
    http-response set-header Cache-Control "no-cache, no-store, must-revalidate"
    http-response set-header Pragma "no-cache"
    http-response set-header Expires "0"
    
    # Server weight and backup configuration
    server wazuh-mcp-server-1 wazuh-mcp-server-1:8443 check weight 100 ssl verify none
    server wazuh-mcp-server-2 wazuh-mcp-server-2:8443 check weight 100 ssl verify none
    server wazuh-mcp-server-3 wazuh-mcp-server-3:8443 check weight 100 ssl verify none
    
    # Failover logic
    option redispatch
    retries 3
    
    # Custom error pages
    errorfile 503 /etc/haproxy/errors/503.http
    
    # Monitoring
    stats enable
    stats uri /backend-stats
    stats refresh 5s