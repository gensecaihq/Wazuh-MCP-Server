#!/bin/bash
# Simple Wazuh MCP Server Configuration Script
# Run this after deploying Docker to configure your Wazuh connection

set -e

echo "üõ°Ô∏è  Wazuh MCP Server Configuration"
echo "=================================="
echo

# Check if Docker is running
if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Error: Docker is not running. Please start Docker first."
    exit 1
fi

# Check if compose.yml exists
if [ ! -f "compose.yml" ]; then
    echo "‚ùå Error: compose.yml not found. Please run this script from the project root directory."
    exit 1
fi

echo "This script will help you configure your Wazuh MCP Server."
echo "You'll need your Wazuh Manager details to proceed."
echo
echo "üöÄ First, choose your deployment mode:"
echo "1. Local Mode (STDIO/JSON) - Recommended for most users"
echo "   ‚úÖ Standard MCP implementation with full functionality"
echo "   ‚úÖ Direct Claude Desktop integration"
echo "   ‚úÖ No network configuration needed"
echo "   ‚úÖ Best performance and compatibility"
echo
echo "2. Remote Mode (HTTP/SSE) - For advanced deployments"
echo "   üåê Web-accessible MCP server"
echo "   üîê Bearer token authentication required"
echo "   üåç Supports reverse proxy and custom domains"
echo "   ‚öôÔ∏è  Requires network and SSL configuration"
echo
read -p "Choose deployment mode [1=Local (default), 2=Remote]: " TRANSPORT_CHOICE
TRANSPORT_CHOICE=${TRANSPORT_CHOICE:-1}

if [[ "$TRANSPORT_CHOICE" == "2" ]]; then
    TRANSPORT_MODE="remote"
    echo "‚úÖ Selected: Remote Mode (HTTP/SSE)"
else
    TRANSPORT_MODE="stdio"
    echo "‚úÖ Selected: Local Mode (STDIO/JSON) - Standard MCP"
fi
echo

# Collect Wazuh settings
read -p "Enter your Wazuh Manager hostname or IP: " WAZUH_HOST
while [[ -z "$WAZUH_HOST" ]]; do
    echo "‚ùå Wazuh hostname cannot be empty."
    read -p "Enter your Wazuh Manager hostname or IP: " WAZUH_HOST
done

read -p "Enter your Wazuh API username: " WAZUH_USER
while [[ -z "$WAZUH_USER" ]]; do
    echo "‚ùå Wazuh username cannot be empty."
    read -p "Enter your Wazuh API username: " WAZUH_USER
done

read -s -p "Enter your Wazuh API password: " WAZUH_PASS
echo
while [[ -z "$WAZUH_PASS" ]]; do
    echo "‚ùå Wazuh password cannot be empty."
    read -s -p "Enter your Wazuh API password: " WAZUH_PASS
    echo
done

# Optional settings
echo
echo "üìã Optional Settings (press Enter to use defaults):"
read -p "Wazuh API port [55000]: " WAZUH_PORT
WAZUH_PORT=${WAZUH_PORT:-55000}

# Remote mode specific settings
if [[ "$TRANSPORT_MODE" == "remote" ]]; then
    read -p "MCP Server port [3000]: " MCP_PORT
    MCP_PORT=${MCP_PORT:-3000}

    echo
    echo "üåê Public URL Configuration (for production deployment):"
    read -p "Public URL (e.g., https://wazuh.company.com or https://server.com/wazuhsse) [http://localhost:$MCP_PORT]: " PUBLIC_URL
    PUBLIC_URL=${PUBLIC_URL:-http://localhost:$MCP_PORT}

    # Extract base path from URL if present
    if [[ "$PUBLIC_URL" == */* ]] && [[ "$PUBLIC_URL" != *"://"*"/"*"/"* ]]; then
        BASE_PATH=""
    elif [[ "$PUBLIC_URL" =~ ^https?://[^/]+(/.*) ]]; then
        BASE_PATH="${BASH_REMATCH[1]}"
        PUBLIC_URL_BASE="${PUBLIC_URL%$BASE_PATH}"
    else
        BASE_PATH=""
        PUBLIC_URL_BASE="$PUBLIC_URL"
    fi
else
    # Local mode doesn't need port or public URL
    MCP_PORT=3000
    PUBLIC_URL="N/A (Local Mode)"
    BASE_PATH=""
fi

read -p "Enable SSL verification? [y/N]: " VERIFY_SSL_INPUT
if [[ "$VERIFY_SSL_INPUT" =~ ^[Yy]$ ]]; then
    VERIFY_SSL="true"
else
    VERIFY_SSL="false"
fi

echo
echo "üîß Configuration Summary:"
echo "========================"
echo "Transport Mode: $TRANSPORT_MODE"
echo "Wazuh Host: $WAZUH_HOST"
echo "Wazuh User: $WAZUH_USER"
echo "Wazuh Port: $WAZUH_PORT"

if [[ "$TRANSPORT_MODE" == "remote" ]]; then
    echo "MCP Port: $MCP_PORT"
    echo "Public URL: $PUBLIC_URL"
    if [[ -n "$BASE_PATH" ]]; then
        echo "Base Path: $BASE_PATH"
    fi
else
    echo "Integration: Direct Claude Desktop (STDIO)"
fi

echo "SSL Verification: $VERIFY_SSL"
echo

read -p "Proceed with this configuration? [Y/n]: " CONFIRM
if [[ "$CONFIRM" =~ ^[Nn]$ ]]; then
    echo "‚ùå Configuration cancelled."
    exit 0
fi

# Create environment file for Docker Compose
echo "üìù Creating configuration file..."
cat > .env.wazuh <<EOF
# Wazuh MCP Server Configuration
# Generated by configure-wazuh.sh on $(date)
# Transport Mode: $TRANSPORT_MODE

# === REQUIRED WAZUH SETTINGS ===
WAZUH_HOST=$WAZUH_HOST
WAZUH_USER=$WAZUH_USER
WAZUH_PASS=$WAZUH_PASS
WAZUH_PORT=$WAZUH_PORT

# === MCP SERVER SETTINGS ===
MCP_TRANSPORT=$TRANSPORT_MODE
MCP_HOST=0.0.0.0
MCP_PORT=$MCP_PORT

# === SECURITY SETTINGS ===
VERIFY_SSL=$VERIFY_SSL

# === CONTAINER SETTINGS ===
ENVIRONMENT=production
PYTHONUNBUFFERED=1
STRUCTURED_LOGGING=true
LOG_LEVEL=INFO
EOF

# Add mode-specific configuration
if [[ "$TRANSPORT_MODE" == "remote" ]]; then
    cat >> .env.wazuh <<EOF

# === REMOTE MODE CONFIGURATION ===
MCP_PUBLIC_URL=$PUBLIC_URL
$(if [[ -n "$BASE_PATH" ]]; then echo "MCP_BASE_PATH=$BASE_PATH"; fi)

# === MCP AUTHENTICATION ===
ENABLE_BEARER_AUTH=true
MCP_AUTH_TOKEN=wazuh_$(date +%s)_token

# === CORS CONFIGURATION ===
CORS_ORIGINS=https://claude.ai,https://*.anthropic.com
EOF
else
    cat >> .env.wazuh <<EOF

# === LOCAL MODE CONFIGURATION ===
# Direct Claude Desktop integration via STDIO
# No authentication or public URL needed for local mode
ENABLE_BEARER_AUTH=false
MCP_PUBLIC_URL=N/A
EOF
fi

echo "‚úÖ Configuration saved to .env.wazuh"

# Configuration file is ready - compose.yml already references it

echo "üöÄ Starting Wazuh MCP Server..."
echo

# Stop any existing containers
docker compose down --remove-orphans 2>/dev/null || true

# Build and start the service
docker compose up -d --build

echo
echo "‚è≥ Waiting for server to start..."
sleep 5

# Check if container is running
if docker compose ps --services --filter "status=running" | grep -q "wazuh-mcp-server"; then
    echo "‚úÖ Wazuh MCP Server is running!"
    echo
    
    if [[ "$TRANSPORT_MODE" == "remote" ]]; then
        echo "üåê Remote MCP Server Access:"
        echo "   Server URL: $PUBLIC_URL"
        echo "   Health Check: $PUBLIC_URL/health"
        echo "   SSE Endpoint: $PUBLIC_URL/sse"
        echo "   Message Endpoint: $PUBLIC_URL/message"
        if [[ -n "$BASE_PATH" ]]; then
            echo "   Base Path: $BASE_PATH"
        fi
        echo
        echo "üîë Authentication:"
        echo "   Bearer Token: $(grep MCP_AUTH_TOKEN .env.wazuh | cut -d'=' -f2)"
        echo "   (Use this token in Claude Desktop Custom Connector)"
        echo
        echo "üéâ Configuration complete! Your Wazuh MCP Server is ready for Claude Desktop Custom Connectors."
    else
        echo "üì± Local MCP Server (STDIO Mode):"
        echo "   Integration: Direct Claude Desktop connection"
        echo "   Authentication: None required (local access)"
        echo "   Protocol: Standard MCP over STDIO/JSON"
        echo
        echo "üîß Claude Desktop Configuration:"
        echo '   Add to claude_desktop_config.json:'
        echo '   {'
        echo '     "mcpServers": {'
        echo '       "wazuh": {'
        echo '         "command": "docker",'
        echo '         "args": ["compose", "exec", "wazuh-mcp-server", "./wazuh-mcp-server", "--stdio"],'
        echo "         \"cwd\": \"$(pwd)\""
        echo '       }'
        echo '     }'
        echo '   }'
        echo
        echo "üéâ Configuration complete! Your Wazuh MCP Server is ready for direct Claude Desktop integration."
    fi
    
    echo
    echo "üìã Useful Commands:"
    echo "   View logs:     docker compose logs -f"
    echo "   Stop server:   docker compose down"
    echo "   Restart:       docker compose restart"
    echo "   Test server:   docker compose exec wazuh-mcp-server python3 test-functionality.py"
else
    echo "‚ùå Server failed to start. Checking logs..."
    docker compose logs --tail=20
    echo
    echo "üí° Troubleshooting:"
    echo "   1. Check if Wazuh Manager is accessible from this machine"
    echo "   2. Verify your credentials are correct"
    echo "   3. Run: docker compose logs -f for detailed logs"
    exit 1
fi